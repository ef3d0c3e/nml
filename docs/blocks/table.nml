@import ../template.nml
%<make_doc({"Blocks"}, "Tables", "Tables")>%

# Tables

NML support for tables is still very limited, though it is possible to build complex layouts like this one:
:TABLE {sample_table} Sample table
| **First column**       |:hspan=2: **Second column** |
|:align=center: Centered | B            | C           |
|:hspan=2: 1                            | 2           |


#+LAYOUT_BEGIN[title=Given by the following code] Spoiler
``Plain Text,
:TABLE {sample_table} Sample table
| **First column**       |:hspan=2: **Second column** |
|:align=center: Centered | B            | C           |
|:hspan=2: 1                            | 2           |``
#+LAYOUT_END

When a line starts with `|` it is considered as the start of a table. Other `|`'s delimit the cells of a table row.
You can also use `:TABLE {refname} Title` before the first line of the table, to make the table into a referenceable element. Tables declared like this are displayed as `media`.

# Cell Properties

On each cell of a table, you may specify properties for the cell, row, column or table. Properties are specified between `:`'s at the start of a cell. It is not possible to redefine an already present property (e.g setting the table text-alignment twice). Below are the supported properties:

 * **Cells**
 *- `align` The text-alignment of the cell
 *- `hspan` The horizontal span of the cell (1 if unset)
 *- `vspan` The vertical span of the cell (1 if unset)
 * **Rows** *Cells will inherit properties from their parent row*
 *- `align` The text-alignment of the row
 *- `rvspan` The vertical span of the row (1 if unset)
 * **Columns** *Cells will inherit properties from their parent column*
 *- `chspan` The horizontal span of the column (1 if unset)
 * **Table** *Each cell will inherit these properties*
 *- `align` Text-alignment for the entire table

# Tables to Lua

You can export a table to use it inside a lua snippet.
Using `:TABLE[export_as=table1]` will make the table available to lua as `nml.tables.table1`.

**Example**:
#+LAYOUT_BEGIN Split
Using Lua, you can perform computations on table rows, cells, etc.
:TABLE[export_as=measures]
| Length | Occurences |
| 1.15   | 357        |
| 1.20   | 143        |
| 1.23   | 72         |
@<main
function weighted_average(table, i, j)
	local weighted_sum = 0
	local total = 0
	for rowIndex, row in pairs(table) do
		if rowIndex ~= 1 then
			weighted_sum = weighted_sum + row[i] * row[j];
			total = total + row[j]
		end
	end
	return weighted_sum / total
end
>@

Average = %<" weighted_average(nml.tables.measures, 1, 2)>%
#+LAYOUT_NEXT
Which is given by:
```Plain Text,
:TABLE[export_as=measures]
| Length | Occurences |
| 1.15   | 357        |
| 1.20   | 143        |
| 1.23   | 72         |
@<main
function weighted_average(table, i, j)
	local weighted_sum = 0
	local total = 0
	for rowIndex, row in pairs(table) do
		if rowIndex ~= 1 then
			weighted_sum = weighted_sum + row[i] * row[j];
			total = total + row[j]
		end
	end
	return weighted_sum / total
end
>@

Average = %<" weighted_average(nml.tables.measures, 1, 2)>%
```
#+LAYOUT_END

# Current limitations

Current known limitations for tables, may change in the future:
 * Referenceable elements cannot be referenced if defined inside of a table.
 * Table layouts are limited and it is not possible to `split` a cell in half if it's parent column has a span of 2.
